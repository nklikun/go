package main

import "fmt"

/*
1894. 找到需要补充粉笔的学生编号
一个班级里有 n 个学生，编号为 0 到 n - 1 。每个学生会依次回答问题，编号为 0 的学生先回答，然后是编号为 1 的学生，以此类推，直到编号为 n - 1 的学生，然后老师会重复这个过程，重新从编号为 0 的学生开始回答问题。
给你一个长度为 n 且下标从 0 开始的整数数组 chalk 和一个整数 k 。一开始粉笔盒里总共有 k 支粉笔。当编号为 i 的学生回答问题时，他会消耗 chalk[i] 支粉笔。如果剩余粉笔数量 严格小于 chalk[i] ，那么学生 i 需要 补充 粉笔。
请你返回需要 补充 粉笔的学生 编号 。


示例 1：
输入：chalk = [5,1,5], k = 22
输出：0
解释：学生消耗粉笔情况如下：
- 编号为 0 的学生使用 5 支粉笔，然后 k = 17 。
- 编号为 1 的学生使用 1 支粉笔，然后 k = 16 。
- 编号为 2 的学生使用 5 支粉笔，然后 k = 11 。
- 编号为 0 的学生使用 5 支粉笔，然后 k = 6 。
- 编号为 1 的学生使用 1 支粉笔，然后 k = 5 。
- 编号为 2 的学生使用 5 支粉笔，然后 k = 0 。
编号为 0 的学生没有足够的粉笔，所以他需要补充粉笔。

示例 2：
输入：chalk = [3,4,1,2], k = 25
输出：1
解释：学生消耗粉笔情况如下：
- 编号为 0 的学生使用 3 支粉笔，然后 k = 22 。
- 编号为 1 的学生使用 4 支粉笔，然后 k = 18 。
- 编号为 2 的学生使用 1 支粉笔，然后 k = 17 。
- 编号为 3 的学生使用 2 支粉笔，然后 k = 15 。
- 编号为 0 的学生使用 3 支粉笔，然后 k = 12 。
- 编号为 1 的学生使用 4 支粉笔，然后 k = 8 。
- 编号为 2 的学生使用 1 支粉笔，然后 k = 7 。
- 编号为 3 的学生使用 2 支粉笔，然后 k = 5 。
- 编号为 0 的学生使用 3 支粉笔，然后 k = 2 。
编号为 1 的学生没有足够的粉笔，所以他需要补充粉笔。

提示：
chalk.length == n
1 <= n <= 105
1 <= chalk[i] <= 105
1 <= k <= 109
https://leetcode.cn/problems/find-the-student-that-will-replace-the-chalk/
*/
func run1894() {
	// 1
	fmt.Println(chalkReplacer([]int{3, 4, 1, 2}, 25))
	// 0
	fmt.Println(chalkReplacer([]int{5, 1, 5}, 22))
	// 97
	fmt.Println(chalkReplacer([]int{22, 86, 96, 35, 62, 69, 56, 33, 95, 10, 38, 53, 33, 90, 29, 68, 85, 58, 11, 49, 81, 18, 32, 96, 40, 75, 49, 26, 60, 71, 15, 94, 31, 99, 12, 81, 10, 19, 7, 73, 35, 56, 100, 15, 37, 89, 58, 17, 55, 62, 4, 30, 68, 68, 89, 62, 39, 35, 16, 18, 63, 73, 100, 22, 46, 58, 80, 77, 23, 5, 52, 96, 98, 21, 33, 86, 81, 71, 69, 72, 71, 58, 17, 85, 70, 22, 84, 94, 75, 51, 60, 81, 12, 22, 13, 33, 53, 58}, 134221332))
}

func chalkReplacer(chalk []int, k int) int {
	n := len(chalk)
	for i := 1; i < n; i++ {
		chalk[i] += chalk[i-1]
	}

	k = k % chalk[n-1]
	l, r := 0, n-1
	for l < r {
		mid := (l + r) / 2
		if chalk[mid] <= k {
			l++
		} else {
			r--
		}
	}
	return l
}

/*
func chalkReplacer(chalk []int, k int) int {
	i := 0
	for k >= 0 {
		k -= chalk[i]
		i++
		if i == len(chalk) {
			i = 0
		}
	}
	if i == 0 {
		return len(chalk) - 1
	}
	return i - 1
}
*/
